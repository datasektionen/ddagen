// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExhibitorInterestRegistration {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  name               String
  organizationNumber String
  contactPerson      String
  phoneNumber        String
  email              String

  @@map("exhibitor_interest_registrations")
}

model Exhibitor {
  id                 String @id @default(uuid())
  name               String
  organizationNumber String @unique

  invoiceEmail String
  logoWhite    Bytes?
  logoColor    Bytes?
  description  String
  packageTier               Int @default(-1)
  studentMeetings           Int @default(0)

  extraTables               Int @default(0)
  extraChairs               Int @default(0)
  extraDrinkCoupons         Int @default(0)
  extraRepresentativeSpots  Int @default(0)
  totalBanquetTicketsWanted Int @default(0)

  customTables               Int @default(0)
  customChairs               Int @default(0)
  customDrinkCoupons         Int @default(0)
  customRepresentativeSpots  Int @default(0)
  customBanquetTicketsWanted Int @default(0)

  mapPosition Int @default(0)

  foodPreferencess FoodPreferences[]
  users            User[]

  jobOfferId String    @unique
  jobOffers  JobOffers @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  sessions   Session[]

  infoSubmissionStatus Int @default(0)

  @@map("exhibitors")
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String
  phone String
  role  String

  exhibitorId String
  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)

  loginCode LoginCode?
  session   Session?

  @@map("users")
}

model LoginCode {
  id         String   @id @db.Char(32)
  validUntil DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_codes")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  exhibitorId String
  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id])

  @@map("sessions")
}

model FoodPreferences {
  id      String                 @id @default(uuid())
  name    String
  value   FoodPreferencesValue[]
  comment String
  type    FoodPreferencesType

  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)
  exhibitorId String

  @@map("food_specifications")
}

enum FoodPreferencesValue {
  Meat
  Vegan
  LactoseFree
  GlutenFree
}

enum FoodPreferencesType {
  Banquet
  Representative
}

model JobOffers {
  id             String     @id @default(uuid())
  summerJob      Int[]
  internship     Int[]
  partTimeJob    Int[]
  masterThesis   Boolean    
  fullTimeJob    Boolean    
  traineeProgram Boolean   
  exhibitor      Exhibitor?

  @@map("job_offers")
}

model Students {
    id             String     @id @default(uuid())
    ugkthid        String     @unique // prioritize data students
    first_name     String
    last_name      String
    email          String
    prefered_email String      //optional
    study_year     Int
    summerJob      Boolean
    partTimeJob    Boolean
    internship     Boolean
    masterThesis   Boolean
    fullTimeJob    Boolean
    traineeProgram Boolean

    cv             String     // set max size in backend, forced

    linkedin_url   String     //optional
    github_url     String     //optional
    other_link     String     //optional
    personal_story String     //optional, max x characters

    // meeting logic
    company_meeting_interests String[] //optional

    @@map("students")
}

model Meetings {
    id               String     @id @default(uuid())
    studentId        String
    exhibitorId      String
    timeslot         Int

    @@map("meetings")
}