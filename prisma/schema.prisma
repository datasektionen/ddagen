// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExhibitorInterestRegistration {
  id                 String   @id @default(uuid())
  createdAt          DateTime @default(now())
  name               String
  organizationNumber String
  contactPerson      String
  phoneNumber        String
  email              String

  @@map("exhibitor_interest_registrations")
}

model Exhibitor {
  id                 String @id @default(uuid())
  name               String
  organizationNumber String @unique

  invoiceEmail String
  logoWhite    Bytes?
  logoColor    Bytes?
  description  String
  package      Package

  extraTables               Int @default(0)
  extraChairs               Int @default(0)
  extraDrinkCoupons         Int @default(0)
  extraRepresentativeSpots  Int @default(0)
  totalBanquetTicketsWanted Int @default(0)

  customTables               Int @default(0)
  customChairs               Int @default(0)
  customDrinkCoupons         Int @default(0)
  customRepresentativeSpots  Int @default(0)
  customBanquetTicketsWanted Int @default(0)

  foodPreferencess FoodPreferences[]
  users            User[]

  jobOfferId String    @unique
  jobOffers  JobOffers @relation(fields: [jobOfferId], references: [id], onDelete: Cascade)
  sessions   Session[]

  @@map("exhibitors")
}

model User {
  id    String @id @default(uuid())
  email String @unique
  name  String
  phone String
  role  String

  exhibitorId String
  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)

  loginCode LoginCode?
  session   Session?

  @@map("users")
}

model LoginCode {
  id         String   @id @db.Char(32)
  validUntil DateTime

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("login_codes")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  lastUsed  DateTime @default(now())

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  exhibitorId String
  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id])

  @@map("sessions")
}

enum Package {
  main
  base
  sponsor
  premium
  startup
  headhunter
}

model FoodPreferences {
  id      String                 @id @default(uuid())
  name    String
  value   FoodPreferencesValue[]
  comment String
  type    FoodPreferencesType

  exhibitor   Exhibitor @relation(fields: [exhibitorId], references: [id], onDelete: Cascade)
  exhibitorId String

  @@map("food_specifications")
}

enum FoodPreferencesValue {
  Meat
  Vegan
  LactoseFree
  GlutenFree
}

enum FoodPreferencesType {
  Banquet
  Representative
}

model JobOffers {
  id             String     @id @default(uuid())
  summerJob      Int[]
  internship     Int[]
  partTimeJob    Int[]
  masterThesis   Boolean
  fullTimeJob    Boolean
  traineeProgram Boolean
  exhibitor      Exhibitor?

  @@map("job_offers")
}
